**create file:
gedit prime_check.c

**code:
#include <mpi.h>
#include <stdio.h>
#include <stdbool.h>

// Function to check if a number is prime
bool is_prime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

int main(int argc, char *argv[]) {
    int world_rank, world_size;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);

    // Ensure there are at least 2 processes
    if (world_size < 2) {
        fprintf(stderr, "World size must be greater than 1 for %s\n", argv[0]);
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    if (world_rank == 0) {
        // Client (rank 0)
        int number;

        // Take input from the user
        printf("Client: Enter an integer to check if it is prime: ");
        scanf("%d", &number);

        // Send number to server (rank 1)
        printf("Client sending number: %d\n", number);
        MPI_Send(&number, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);

        // Receive result from server
        int is_prime_result;
        MPI_Recv(&is_prime_result, 1, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        // Display the result based on server response
        if (is_prime_result) {
            printf("Client received: %d is a prime number.\n", number);
        } else {
            printf("Client received: %d is NOT a prime number.\n", number);
        }
    }
    else if (world_rank == 1) {
        // Server (rank 1)
        int number;

        // Receive number from client
        MPI_Recv(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        printf("Server received number: %d\n", number);

        // Check if the number is prime
        int result = is_prime(number);

        // Send result back to client
        MPI_Send(&result, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}


**compile:
mpicc -o prime_check prime_check.c

run:
mpirun -np 2 ./prime_check

**enter number on terminal:
12
Server received number: 12
Client: Enter an integer to check if it is prime: Client sending number: 12
Client received: 12 is NOT a prime number.
